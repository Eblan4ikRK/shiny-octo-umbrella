// middleware.ts
import { NextRequest, NextResponse } from 'next/server';
import { Redis } from '@upstash/redis';
import { Ratelimit } from '@upstash/ratelimit';

// --- –ù–ê–°–¢–†–û–ô–ö–ò ---

// 1. –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (ISO 3166-1 alpha-2)
const BLOCKED_COUNTRIES: string[] = [
  'VN', 'CN', 'IN', 'PK', 'BR', 'ID', 'TH', 'TR', 'EG', 'SC', 'IR', 'NG', 'RU'
];

// 2. WHITELIST: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User-Agent. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö.
// –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –±–æ—Ç–æ–≤, —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
const ALLOWED_USER_AGENTS: string[] = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
  'Chrome',   // Google Chrome, Brave, –∏ –¥—Ä—É–≥–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Chromium
  'Firefox',  // Mozilla Firefox
  'Safari',   // Apple Safari (–≤–∞–∂–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –º–Ω–æ–≥–æ –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ iOS/macOS)
  'Edg',      // Microsoft Edge
  'OPR',      // Opera

  // –í–∞–∂–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –±–æ—Ç—ã (–¥–ª—è SEO)
  'Googlebot',
  'Bingbot',
  'Slurp',    // Yahoo
  'DuckDuckBot',
  'YandexBot',
];

// 3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –û–î–ù–û–ì–û IP-–∞–¥—Ä–µ—Å–∞ (Rate Limit)
const INDIVIDUAL_RATE_LIMIT = { requests: 10, window: '10 s' } as const;

// 4. –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ç–∞–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const ATTACK_THRESHOLD = 10000; // 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤
const ATTACK_TIME_WINDOW_SECONDS = 60; // –∑–∞ 60 —Å–µ–∫—É–Ω–¥

// --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis (–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å)
let redis: Redis | null = null;
let ratelimit: Ratelimit | null = null;

if (process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN) {
  redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL,
    token: process.env.UPSTASH_REDIS_REST_TOKEN,
  });

  ratelimit = new Ratelimit({
    redis,
    limiter: Ratelimit.slidingWindow(INDIVIDUAL_RATE_LIMIT.requests, INDIVIDUAL_RATE_LIMIT.window),
    analytics: true,
    prefix: 'ratelimit',
  });
} else {
  console.warn('Upstash Redis environment variables not found. Key security features are disabled.');
}


// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Middleware
export async function middleware(request: NextRequest) {
  // –ï—Å–ª–∏ Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  if (!redis || !ratelimit) {
    return NextResponse.next();
  }

  const ip = request.ip ?? '127.0.0.1';
  const country = request.geo?.country;
  const userAgent = request.headers.get('user-agent') || '';

  // === –ù–ê–ß–ê–õ–û –¶–ï–ü–û–ß–ö–ò –ü–†–û–í–ï–†–û–ö ===

  // 1. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ
  if (country && BLOCKED_COUNTRIES.includes(country)) {
    await incrementBlockedCounter(redis);
    return new NextResponse(`Access from country ${country} is denied.`, { status: 403 });
  }
  
  // 2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ User-Agent (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ)
  const isAllowedUserAgent = ALLOWED_USER_AGENTS.some(agent => userAgent.includes(agent));
  if (!isAllowedUserAgent) {
    await incrementBlockedCounter(redis);
    return new NextResponse('Your browser or bot is not allowed.', { status: 403 });
  }

  // 3. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π Rate Limit –ø–æ IP (—Å–∞–º–∞—è –¥–æ—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π)
  const { success } = await ratelimit.limit(ip);
  if (!success) {
    await incrementBlockedCounter(redis);
    return new NextResponse('Too many requests. Please try again later.', { status: 429 });
  }

  // === –ö–û–ù–ï–¶ –¶–ï–ü–û–ß–ö–ò –ü–†–û–í–ï–†–û–ö ===

  // 4. –î–µ—Ç–µ–∫—Ç–æ—Ä –∞—Ç–∞–∫ (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –í–°–ï –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–æ—à–µ–¥—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
  // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–∂–µ –ª–µ–≥–∏—Ç–∏–º–Ω—ã–π, –Ω–æ –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫
  const { totalRequests, blockedRequests } = await getAttackCounters(redis);

  if (totalRequests > ATTACK_THRESHOLD) {
    const notificationSent = await redis.get('notification_sent_flag');
    if (!notificationSent) {
      const passedRequests = totalRequests - blockedRequests;
      const attackStrength = (totalRequests / ATTACK_TIME_WINDOW_SECONDS).toFixed(1);

      const message = `üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—Ç–∞–∫–∞ –Ω–∞ —Å–∞–π—Ç!* üö®
      
- *–°–∏–ª–∞ –∞—Ç–∞–∫–∏:* ~${attackStrength} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫
- *–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ ${ATTACK_TIME_WINDOW_SECONDS} —Å–µ–∫:* ${totalRequests}
- *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (Geo/UA/RateLimit):* ${blockedRequests}
- *–ü—Ä–æ—à–ª–æ –Ω–∞ —Å–∞–π—Ç:* ${passedRequests}
      
–ü—Ä–∏–Ω—è—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é.`;

      await sendTelegramMessage(message);
      await redis.set('notification_sent_flag', 'true', { ex: ATTACK_TIME_WINDOW_SECONDS });
    }
  }

  return NextResponse.next();
}


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –∏–∑–º–µ–Ω—è—Ç—å) ---

async function getAttackCounters(redis: Redis) {
    const pipe = redis.pipeline();
    const totalKey = 'attack:total';
    const blockedKey = 'attack:blocked';
  
    pipe.incr(totalKey);
    pipe.expire(totalKey, ATTACK_TIME_WINDOW_SECONDS, 'NX');
    pipe.get(blockedKey);
    pipe.expire(blockedKey, ATTACK_TIME_WINDOW_SECONDS, 'NX');
  
    const [_, __, blocked, ___] = await pipe.exec<[number, number, string | null, number]>();
    const currentTotal = await redis.get<number>(totalKey) ?? 1;
  
    return {
      totalRequests: currentTotal,
      blockedRequests: parseInt(blocked ?? '0'),
    };
}

async function incrementBlockedCounter(redis: Redis) {
  await redis.incr('attack:blocked');
}

async function sendTelegramMessage(text: string) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!token || !chatId) {
    console.warn('Telegram credentials are not set. Cannot send notification.');
    return;
  }
  
  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text: text, parse_mode: 'Markdown' }),
    });
  } catch (error) {
    console.error('Failed to send Telegram message:', error);
  }
}

export const config = {
  matcher: '/((?!api|_next/static|_next/image|favicon.ico).*)',
};